These files are leveraged by the test-alaudaDevops-client-plugin job at https://ci.alaudaDevops.redhat.com/jenkins.
A test image based off of the jenkins image at https://github.com/alaudaDevops/jenkins will be built with the dockerfile
here and any Alauda Devops Jenkins plugin file stored in the PR-Testing/jpi file as "alaudaDevops-client.jpi".  In the case of
the https://ci.alaudaDevops.redhat.com/jenkins/view/All/job/test_branch_jenkins_client_plugin/ job, it will be the hpi file from your PR.  But you can also test any local changes
you have to the plugin in the same way.

To test your changes locally:
- Build the Jenkins plugin with maven (e.g. mvn clean package)
- In the PR-Testing folder, run `./build-jenkins-client-plugin-snapshot-image.sh`

This script will build the docker image: alaudaDevops/jenkins-client-plugin-snapshot-test:latest

Next, run the extended tests for the plugin located at https://github.com/alaudaDevops/origin.
To target the snapshot image built above, set the environment variable USE_SNAPSHOT_JENKINS_CLIENT_IMAGE
to a non-empty string. For example, from the top level directory of the origin repository, run:
    USE_SNAPSHOT_JENKINS_CLIENT_IMAGE=1 make test-extended SUITE=core FOCUS="jenkins-client-plugin"

Note: Specifying the environment variable on the same line as the command to run limits the variable's lifetime to
the invocation of the test framework. Limiting the variable's lifetime is not required, but is encouraged to ensure
you do not unintentionally run tests against the local Jenkins image at a later time.

If the USE_SNAPSHOT_JENKINS_CLIENT_IMAGE variable is not set, the extended tests will ignore the local snapshot image and
test the official jenkins image (see https://github.com/alaudaDevops/jenkins).
